Jest
Jest je popularni JavaScript testni okvir razvijen od strane Facebooka, prvenstveno za testiranje React aplikacija.

Prednosti:
-Integracija s React-om:
	Jest je optimiziran za testiranje React aplikacija, pružajući alate za lako testiranje komponenti, propova i stanja.
-Snapshot Testiranje:
	Omogućava jednostavno testiranje UI komponenti putem snapshot testova, koji automatski kreiraju snimke trenutnog izgleda 
	komponenti i uspoređuju ih s budućim promjenama.
-Jednostavnost korištenja:
	Jednostavan za postavljanje i korištenje, sa minimalnom konfiguracijom potrebnom za početak testiranja.
-Bogata podrška za asinkrono testiranje:
	Nudi napredne funkcionalnosti za testiranje asinkronih koda, uključujući podršku za promise i async/await sintaksu.
-Izvještaji i pokrivenost koda:
	Nudi detaljne izvještaje o pokrivenosti koda, omogućavajući uvid u dijelove aplikacije koji nisu pokriveni testovima.
-Mogućnost paralelnog izvođenja testova:
	Automatski pokreće testove paralelno, što može značajno ubrzati vrijeme testiranja na velikim projektima.
-Ekosistem i zajednica:
	Velika zajednica korisnika i širok ekosistem dodataka i ekstenzija, uključujući Enzyme za dublje testiranje React komponenti.

Mane:
-Performanse s velikim projektima:
	Kod velikih projekata, posebno onih s puno snapshot testova, Jest može postati sporiji, što može utjecati na vrijeme build-a i CI/CD procese.
-Kompatibilnost s drugim alatima:
	Iako jest jako kompatibilan s React-om, može biti manje kompatibilan ili zahtijevati dodatnu konfiguraciju za rad s nekim drugim alatima 
	ili bibliotekama.
-Snapshot testiranje može biti zamorno:
	Iako je snapshot testiranje moćna funkcionalnost, može biti sklon lažnim pozitivnim rezultatima i zahtijevati puno ručnog odobravanja promjena.
-Krivulja učenja za početnike:
	Iako je jednostavan za korištenje, za početnike može postojati određena krivulja učenja, posebno ako dolaze iz drugog testnog okvira ili jezika.
-Specifičnost za JavaScript/TypeScript:
	Jest je specifičan za JavaScript/TypeScript ekosistem, pa može biti manje korisna opcija za projekte koji koriste druge jezike ili 
	višejezične projekte.
--------------------------------------------------------------------------------------------------------------------
Mocha
Mocha je još jedan popularan JavaScript testni okvir, koji se često koristi za testiranje Node.js aplikacija, 
ali je takođe fleksibilan za testiranje bilo koje JavaScript aplikacije. Evo pregleda glavnih prednosti i mana korištenja Mocha-e:

Prednosti:
-Fleksibilnost i prilagodljivost:
    Mocha je vrlo fleksibilan i prilagodljiv, omogućavajući korisnicima da odaberu biblioteke za tvrđenje (assertion libraries), 
    mokiranje (mocking libraries) i pokrivenost koda (code coverage tools) prema svojim potrebama.
-Ekosistem dodataka:
    Postoji veliki broj dodataka i ekstenzija za Mocha koje pružaju dodatne funkcionalnosti kao što su različite metode izvještavanja rezultata testa, 
    integracija s drugim alatima i podrška za različite stilove testiranja.
-Podrška za asinkrono testiranje:
    Mocha pruža robustnu podršku za asinkrono testiranje, uključujući callback funkcije, promise, async/await sintaksu, 
    što ga čini idealnim za testiranje aplikacija koje koriste asinkroni kod.
-Podrška za različite stilove testiranja:
    Mocha podržava različite stilove testiranja, uključujući BDD (Behavior-Driven Development) i TDD (Test-Driven Development), 
    pružajući fleksibilnost u odabiru stila koji najbolje odgovara timu ili projektu.
-Detaljni i prilagodljivi izvještaji:
    Mocha nudi razne formate izvještavanja i omogućava prilagođavanje izvještaja kako bi se osiguralo da korisnici dobiju tačno 
	informacije koje su im potrebne.

Mane:
-Konfiguracija i postavljanje:
	Za razliku od Jest-a, Mocha zahtijeva više konfiguracije i postavljanja, posebno kada je potrebno integrirati dodatne biblioteke za tvrđenje, 
	mokiranje i pokrivenost koda.
-Bez ugrađene podrške za pokrivenost koda:
	Mocha ne dolazi s ugrađenom podrškom za pokrivenost koda, što znači da korisnici moraju integrirati dodatne alate poput Istanbul ili 
	nyc za generiranje izvještaja o pokrivenosti.
-Manjak ugrađene podrške za snapshot testiranje:
	Za razliku od Jest-a, Mocha nema ugrađenu podršku za snapshot testiranje, što može otežati testiranje UI komponenti ili 
	zahtijevati dodatne biblioteke za postizanje slične funkcionalnosti.
-Mogućnost konflikta s drugim alatima:
	Zbog velike fleksibilnosti i potrebe za integracijom različitih biblioteka, može doći do konflikata između različitih alata i dodataka, 
	što može otežati postavljanje i održavanje testnog okruženja.
-Performanse:
	Mocha može biti sporiji u poređenju s Jest-om kada se koriste velike količine testova, 
	posebno zbog potrebe za dodatnim alatima za pokrivenost koda i mokiranje.
--------------------------------------------------------------------------------------------------------------------
Storybook
Storybook je alat za razvoj, testiranje i dokumentiranje UI komponenti u izolaciji. Koristi se prvenstveno s bibliotekama poput React, Vue, 
Angular, i Svelte. Evo pregleda glavnih prednosti i mana korištenja Storybook-a:

Prednosti:
-Izolirani razvoj komponenti:
	Omogućava razvoj komponenti u izolaciji od aplikacije, što pojednostavljuje testiranje i iteraciju nad komponentama bez utjecaja na ostatak aplikacije.
-Vizualna dokumentacija:
	Pruža vizualnu dokumentaciju za komponente, što olakšava pregled i razumijevanje dostupnih komponenti i njihovih stanja unutar tima.
-Addon ekosistem:
	Bogat ekosistem dodataka koji proširuju funkcionalnost Storybook-a, uključujući alate za dizajn, pristupačnost, međunarodnu podršku, 
	testiranje performansi i još mnogo toga.
-Interaktivno testiranje:
	Omogućava interaktivno testiranje UI komponenti, uključujući testiranje različitih stanja i kombinacija propova, 
	što pomaže u otkrivanju bugova i nekompatibilnosti.
-Automatizacija testiranja:
	Integracija s alatima za automatsko testiranje, poput Jest-a, Enzyme-a, ili Cypress-a, omogućava pokretanje testova unutar Storybook okruženja.
-Dizajnerska suradnja:
	Dizajneri mogu koristiti Storybook za pregled i testiranje komponenti, što olakšava suradnju između dizajnerskih i razvojnih timova.
-Podrška za različite okvire:
	Radi s različitim JavaScript okvirima, što ga čini svestranim alatom za razvoj UI komponenti bez obzira na tehnologiju korištenu u projektu.

Mane:
-Početna postavka i konfiguracija:
	Može zahtijevati značajnu početnu postavku i konfiguraciju, posebno za projekte koji koriste prilagođene build procese ili kompleksne konfiguracije.
-Performanse:
	Veliki projekti s mnogo komponenti mogu utjecati na performanse Storybook-a, što može rezultirati sporijim učitavanjem i navigacijom unutar alata.
-Održavanje:
	Potrebno je redovito održavanje i ažuriranje Storybook konfiguracije, dodataka i povezanih alata kako bi se osigurala kompatibilnost s novim 
	verzijama komponenti i okvira.
-Razvoj u izolaciji:
	Iako razvoj u izolaciji ima mnoge prednosti, može dovesti do situacija gdje komponente rade u Storybook-u, 
	ali ne i unutar stvarne aplikacije zbog razlika u okruženju ili konfiguraciji.
-Učenje i prilagodba:
	Može postojati krivulja učenja za nove korisnike, posebno one koji nisu upoznati s konceptom razvoja komponenti u izolaciji ili 
	korištenjem specifičnih dodataka.
--------------------------------------------------------------------------------------------------------------------
Cypress
Cypress je moderan alat za end-to-end (E2E) testiranje koji je postao vrlo popularan među web developerima zbog svoje jednostavnosti i učinkovitosti. 
Evo pregleda glavnih prednosti i mana korištenja Cypress-a:

Prednosti:
-Jednostavno postavljanje i korištenje:
	Cypress je poznat po jednostavnom postavljanju i intuitivnom API-ju, što omogućava brzi početak testiranja bez potrebe za složenim konfiguracijama.
-Brzina i učinkovitost:
	Izvodi testove vrlo brzo jer koristi istu petlju događaja kao i aplikacija koja se testira. To znači da Cypress može interaktirati s 
	aplikacijom u stvarnom vremenu i pružiti brze povratne informacije.
-Sveobuhvatna podrška za end-to-end testiranje:
	Pruža moćne alate za pisanje i izvođenje end-to-end testova, uključujući mogućnosti za interakciju s DOM-om, 
	testiranje mrežnih zahtjeva, autentifikaciju i još mnogo toga.
-Vizualno debuggiranje:
	Pruža vizualno okruženje za debuggiranje koje omogućava pregled svakog koraka testnog slučaja, uključujući snimke zaslona i video zapise testa, 
	što olakšava dijagnosticiranje problema.
-Automatsko ponavljanje testova:
	Ima ugrađenu podršku za automatsko ponavljanje testova, što može pomoći u rješavanju problema s flakinessom testova koji su često 
	uzrokovani asinhronim operacijama.
-Podrška za moderne web aplikacije:
	Izvrsno radi s modernim JavaScript okvirima kao što su React, Angular, Vue, te pruža alate za jednostavno testiranje aplikacija koje koriste moderne tehnologije.

Mane:
-Ograničena podrška za više tabova ili prozora:
	Cypress trenutno ne podržava testiranje aplikacija koje zahtijevaju interakciju s više tabova ili prozora unutar istog testa, 
	što može biti ograničavajuće za neke aplikacije.
-Testiranje u stvarnim preglednicima:
	Iako Cypress može testirati u Chrome-u i Firefox-u, podrška za druge preglednike kao što su Safari i Internet Explorer 
	može biti ograničena ili zahtijevati dodatne postavke.
-Podrška za mobilne uređaje:
	Podrška za testiranje mobilnih uređaja nije toliko razvijena kao kod nekih drugih alata za testiranje, 
	što može biti problem za timove koji trebaju robustno mobilno testiranje.
-Upravljanje stanjem aplikacije:
	Testiranje aplikacija koje snažno ovise o stanju može biti izazovno jer Cypress radi unutar istog okvira kao i aplikacija, 
	što može zahtijevati dodatne korake za resetiranje stanja između testova.
-Nema podrške za izvanmrežno testiranje:
	Cypress nije dizajniran za izvanmrežno testiranje aplikacija koje trebaju raditi bez mrežne povezanosti, 
	što može biti problem za specifične vrste aplikacija.
--------------------------------------------------------------------------------------------------------------------
Jasmine
Jasmine je popularan testni okvir za JavaScript, poznat po svojoj jednostavnosti i podršci za Behavior-Driven Development (BDD). 
Koristi se za testiranje JavaScript koda, uključujući i frontend i backend aplikacije. Evo pregleda glavnih prednosti i mana korištenja Jasmine-a:

Prednosti:
-Jednostavno postavljanje:
	Jasmine je lagan za postavljanje i ne zahtijeva dodatne biblioteke ili alate za osnovno testiranje, što omogućava brz početak testiranja.
-Puna BDD podrška:
	Podržava BDD pristup pisanju testova, što omogućava pisanje testova na način koji je lako čitljiv i razumljiv, čak i za one koji nisu programeri.
-Bez vanjskih ovisnosti:
	Jasmine ne ovisi o bilo kojem vanjskom alatu ili biblioteci za rad, što ga čini jednostavnim i neovisnim rješenjem za testiranje.
-Podrška za različite okvire:
	Radi s različitim JavaScript okvirima, uključujući Angular, React, Vue i Node.js, što ga čini fleksibilnim izborom za različite projekte.
-Asinkrono testiranje:
	Omogućava testiranje asinkronih operacija pomoću funkcija poput done i async/await, što olakšava testiranje koda koji koristi promese ili asinkrono ponašanje.
-Ekosistem i proširenja:
	Bogat ekosistem dodataka i proširenja koji omogućavaju proširivanje osnovne funkcionalnosti Jasmine-a, 
	uključujući alate za pokrivenost koda, mockiranje i izvještavanje.

Mane:
-Nema ugrađenu podršku za pokrivenost koda:
	Za razliku od nekih modernih okvira kao što je Jest, Jasmine nema ugrađenu podršku za pokrivenost koda, 
	što zahtijeva korištenje dodatnih alata poput Istanbul ili nyc.
-Konfiguracija za veće projekte:
	Dok je jednostavan za manje projekte, veći projekti mogu zahtijevati složenije postavljanje i konfiguraciju, 
	posebno kada se koristi s različitim alatima za izgradnju i testiranje.
-Ograničena podrška za snapshot testiranje:
	Jasmine ne pruža ugrađenu podršku za snapshot testiranje, što može biti ograničavajuće za projekte koji zahtijevaju ovu vrstu testiranja, 
	posebno za UI komponente.
-Manje integracija sa modernim alatima:
	Iako je fleksibilan, Jasmine može zahtijevati više ručne konfiguracije za integraciju s modernim alatima za izgradnju i 
	kontinuiranu integraciju u poređenju s alatima kao što su Jest ili Cypress.
-Zastarjela dokumentacija i spor razvoj:
	Neki korisnici su primijetili da dokumentacija Jasmine-a može biti zastarjela i da okvir ne dobija ažuriranja tako brzo kao neki drugi alati, 
	što može otežati korištenje najnovijih funkcionalnosti i rješenja za probleme.
